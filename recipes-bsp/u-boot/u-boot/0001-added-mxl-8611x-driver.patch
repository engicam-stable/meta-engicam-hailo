From 2bf572eead5e6dd8efa7d34b0ba03876428d66d3 Mon Sep 17 00:00:00 2001
From: Matteo Lisi <matteo.lisi@engicam.com>
Date: Wed, 16 Oct 2024 11:59:55 +0200
Subject: [PATCH] added mxl-8611x driver

---
 drivers/net/phy/Kconfig     |   5 +
 drivers/net/phy/Makefile    |   1 +
 drivers/net/phy/mxl-8611x.c | 276 ++++++++++++++++++++++++++++++++++++
 drivers/net/phy/phy.c       |   3 +
 4 files changed, 285 insertions(+)
 create mode 100644 drivers/net/phy/mxl-8611x.c

diff --git a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
index 68ee7d7a2d..f71ae55a62 100644
--- a/drivers/net/phy/Kconfig
+++ b/drivers/net/phy/Kconfig
@@ -202,6 +202,11 @@ endif # PHY_MICREL
 config PHY_MSCC
 	bool "Microsemi Corp Ethernet PHYs support"
 
+config PHY_MXL8611X
+	bool "MaxLinear MXL8611X Ethernet PHYs"
+	help
+	  Add support for configuring MaxLinear MXL8611X Ethernet PHYs.
+
 config PHY_NATSEMI
 	bool "National Semiconductor Ethernet PHYs support"
 
diff --git a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
index 218b8c7669..bae94c5959 100644
--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -22,6 +22,7 @@ obj-$(CONFIG_PHY_MARVELL) += marvell.o
 obj-$(CONFIG_PHY_MICREL_KSZ8XXX) += micrel_ksz8xxx.o
 obj-$(CONFIG_PHY_MICREL_KSZ90X1) += micrel_ksz90x1.o
 obj-$(CONFIG_PHY_MESON_GXL) += meson-gxl.o
+obj-$(CONFIG_PHY_MXL8611X) += mxl-8611x.o
 obj-$(CONFIG_PHY_NATSEMI) += natsemi.o
 obj-$(CONFIG_PHY_NXP_C45_TJA11XX) += nxp-c45-tja11xx.o
 obj-$(CONFIG_PHY_REALTEK) += realtek.o
diff --git a/drivers/net/phy/mxl-8611x.c b/drivers/net/phy/mxl-8611x.c
new file mode 100644
index 0000000000..19eb56567a
--- /dev/null
+++ b/drivers/net/phy/mxl-8611x.c
@@ -0,0 +1,276 @@
+// SPDX-License-Identifier: GPL-2.0+
+/**
+ *  Driver for MaxLinear MXL8611X Ethernet PHYs
+ *
+ * Copyright 2023 Variscite Ltd.
+ * Copyright 2023 MaxLinear Inc.
+ * Copyright 2023 SolidRun Ltd.
+ * Author: Nate Drude <nate.d@variscite.com>
+ * Author: Jon Nettleton <jon@solid-run.com>
+ */
+
+#include <common.h>
+#include <phy.h>
+#include <dm/device_compat.h>
+#include <linux/bitfield.h>
+#include <linux/bitops.h>
+
+/* PHY IDs */
+#define PHY_ID_MXL86110		0xC1335580
+#define PHY_ID_MXL86111		0xC1335588
+
+/* required to access extended registers */
+#define MXL8611X_EXTD_REG_ADDR_OFFSET				0x1E
+#define MXL8611X_EXTD_REG_ADDR_DATA				0x1F
+
+/* RGMII register */
+#define MXL8611X_EXT_RGMII_CFG1_REG				0xA003
+#define MXL8611X_EXT_RGMII_CFG1_NO_DELAY			0
+
+#define MXL8611X_EXT_RGMII_CFG1_RX_DELAY_MASK			GENMASK(13, 10)
+#define MXL8611X_EXT_RGMII_CFG1_TX_1G_DELAY_MASK		GENMASK(3, 0)
+#define MXL8611X_EXT_RGMII_CFG1_TX_10MB_100MB_DELAY_MASK	GENMASK(7, 4)
+
+/* LED registers and defines */
+#define MXL8611X_LED0_CFG_REG					0xA00C
+#define MXL8611X_LED1_CFG_REG					0xA00D
+#define MXL8611X_LED2_CFG_REG					0xA00E
+
+static int mxl8611x_convert_ps_to_reg(int of_value, int *reg)
+{
+	if (of_value < 0 || of_value > 2250)
+		return -EINVAL;
+
+	*reg = DIV_ROUND_CLOSEST(of_value, 150);
+
+	return 0;
+}
+
+static u16 mxl8611x_ext_read(struct phy_device *phydev, const u32 regnum)
+{
+	u16 val;
+
+	phy_write(phydev, MDIO_DEVAD_NONE, MXL8611X_EXTD_REG_ADDR_OFFSET, regnum);
+	val = phy_read(phydev, MDIO_DEVAD_NONE, MXL8611X_EXTD_REG_ADDR_DATA);
+
+	debug("%s: MXL86110@0x%x 0x%x=0x%x\n", __func__, phydev->addr, regnum, val);
+
+	return val;
+}
+
+static int mxl8611x_ext_write(struct phy_device *phydev, const u32 regnum, const u16 val)
+{
+	debug("%s: MXL86110@0x%x 0x%x=0x%x\n", __func__, phydev->addr, regnum, val);
+
+	phy_write(phydev, MDIO_DEVAD_NONE, MXL8611X_EXTD_REG_ADDR_OFFSET, regnum);
+
+	return phy_write(phydev, MDIO_DEVAD_NONE, MXL8611X_EXTD_REG_ADDR_DATA, val);
+}
+
+static int mxl8611x_extread(struct phy_device *phydev, int addr, int devaddr,
+			       int regnum)
+{
+	return mxl8611x_ext_read(phydev, regnum);
+}
+
+static int mxl8611x_extwrite(struct phy_device *phydev, int addr,
+				int devaddr, int regnum, u16 val)
+{
+	return mxl8611x_ext_write(phydev, regnum, val);
+}
+
+static int mxl8611x_led_cfg(struct phy_device *phydev)
+{
+	int ret;
+	int i;
+	char propname[25];
+	u32 of_val;
+
+	ofnode node = phy_get_ofnode(phydev);
+
+	if (!ofnode_valid(node)) {
+		dev_err(phydev->dev, "%s: failed to get node\n", __func__);
+		return -EINVAL;
+	}
+
+	/* Get property from dts */
+	ret = ofnode_read_u32(node, "phy-handle", &of_val);
+	if (ret) {
+		dev_err(phydev->dev, "%s: failed to get phy-handle\n", __func__);
+		return ret;
+	}
+
+	node = ofnode_get_by_phandle(of_val); 
+
+	if (!ofnode_valid(node)) {
+		dev_err(phydev->dev, "%s: failed to get phandle node\n", __func__);
+		return -EINVAL;
+	}
+
+	/* Loop through three the LED registers */
+	for (i = 0; i < 3; i++) {
+		/* Read property from device tree */
+		ret = snprintf(propname, sizeof(propname), "mxl-8611x,led%d_cfg", i);
+		if (ofnode_read_u32(node, propname, &of_val))
+			continue;
+
+		printf("setting %s to 0x%x\n", propname, of_val);
+		/* Update PHY LED register */
+		mxl8611x_ext_write(phydev, MXL8611X_LED0_CFG_REG + i, of_val);
+	}
+
+	return 0;
+}
+
+static int mxl8611x_rgmii_cfg_of_delay(struct phy_device *phydev, const char *property, int *val)
+{
+	u32 of_val;
+	int ret;
+
+	ofnode node = phy_get_ofnode(phydev);
+
+	if (!ofnode_valid(node)) {
+		dev_err(phydev->dev, "%s: failed to get node\n", __func__);
+		return -EINVAL;
+	}
+
+	/* Get property from dts */
+	ret = ofnode_read_u32(node, "phy-handle", &of_val);
+	if (ret) {
+		dev_err(phydev->dev, "%s: failed to get phy-handle\n", __func__);
+		return ret;
+	}
+
+	node = ofnode_get_by_phandle(of_val); 
+
+	if (!ofnode_valid(node)) {
+		dev_err(phydev->dev, "%s: failed to get phandle node\n", __func__);
+		return -EINVAL;
+	}
+
+	/* Get property from dts */
+	ret = ofnode_read_u32(node, property, &of_val);
+	if (ret) {
+		return ret;
+	}
+
+	/* Convert delay in ps to register value */
+	ret = mxl8611x_convert_ps_to_reg(of_val, val);
+	if (ret)
+		dev_err(phydev->dev, "%s: %s = %d is invalid, using default value\n",
+		       __func__, property, of_val);
+
+	return ret;
+}
+
+static int mxl8611x_rgmii_cfg(struct phy_device *phydev)
+{
+	u32 val = 0;
+	int rxdelay, txdelay_100m, txdelay_1g;
+
+	/* Get rgmii register value */
+	val = mxl8611x_ext_read(phydev, MXL8611X_EXT_RGMII_CFG1_REG);
+
+	/* Get RGMII Rx Delay Selection from device tree or rgmii register */
+	if (mxl8611x_rgmii_cfg_of_delay(phydev, "mxl-8611x,rx-internal-delay-ps", &rxdelay))
+		rxdelay = FIELD_GET(MXL8611X_EXT_RGMII_CFG1_RX_DELAY_MASK, val);
+
+	/* Get Fast Ethernet RGMII Tx Clock Delay Selection from device tree or rgmii register */
+	if (mxl8611x_rgmii_cfg_of_delay(phydev, "mxl-8611x,tx-internal-delay-ps-100m",
+					&txdelay_100m))
+		txdelay_100m = FIELD_GET(MXL8611X_EXT_RGMII_CFG1_TX_10MB_100MB_DELAY_MASK, val);
+
+	/* Get Gigabit Ethernet RGMII Tx Clock Delay Selection from device tree or rgmii register */
+	if (mxl8611x_rgmii_cfg_of_delay(phydev, "mxl-8611x,tx-internal-delay-ps-1g", &txdelay_1g))
+		txdelay_1g = FIELD_GET(MXL8611X_EXT_RGMII_CFG1_TX_1G_DELAY_MASK, val);
+
+	switch (phydev->interface) {
+	case PHY_INTERFACE_MODE_RGMII:
+		val = MXL8611X_EXT_RGMII_CFG1_NO_DELAY;
+		break;
+	case PHY_INTERFACE_MODE_RGMII_RXID:
+		val = (val & ~MXL8611X_EXT_RGMII_CFG1_RX_DELAY_MASK) |
+			FIELD_PREP(MXL8611X_EXT_RGMII_CFG1_RX_DELAY_MASK, rxdelay);
+		break;
+	case PHY_INTERFACE_MODE_RGMII_TXID:
+		val = (val & ~MXL8611X_EXT_RGMII_CFG1_TX_10MB_100MB_DELAY_MASK) |
+			FIELD_PREP(MXL8611X_EXT_RGMII_CFG1_TX_10MB_100MB_DELAY_MASK, txdelay_100m);
+		val = (val & ~MXL8611X_EXT_RGMII_CFG1_TX_1G_DELAY_MASK) |
+			FIELD_PREP(MXL8611X_EXT_RGMII_CFG1_TX_1G_DELAY_MASK, txdelay_1g);
+		break;
+	case PHY_INTERFACE_MODE_RGMII_ID:
+		val = (val & ~MXL8611X_EXT_RGMII_CFG1_RX_DELAY_MASK) |
+			FIELD_PREP(MXL8611X_EXT_RGMII_CFG1_RX_DELAY_MASK, rxdelay);
+		val = (val & ~MXL8611X_EXT_RGMII_CFG1_TX_10MB_100MB_DELAY_MASK) |
+			FIELD_PREP(MXL8611X_EXT_RGMII_CFG1_TX_10MB_100MB_DELAY_MASK, txdelay_100m);
+		val = (val & ~MXL8611X_EXT_RGMII_CFG1_TX_1G_DELAY_MASK) |
+			FIELD_PREP(MXL8611X_EXT_RGMII_CFG1_TX_1G_DELAY_MASK, txdelay_1g);
+		break;
+	default:
+		printf("%s: Error: Unsupported rgmii mode %d\n", __func__, phydev->interface);
+		return -EINVAL;
+	}
+
+	return mxl8611x_ext_write(phydev, MXL8611X_EXT_RGMII_CFG1_REG, val);
+}
+
+static int mxl8611x_config(struct phy_device *phydev)
+{
+	int ret;
+
+	/* Configure rgmii */
+	ret = mxl8611x_rgmii_cfg(phydev);
+
+	if (ret < 0)
+		return ret;
+
+	/* Configure LEDs */
+	ret = mxl8611x_led_cfg(phydev);
+
+	if (ret < 0)
+		return ret;
+
+	return genphy_config(phydev);
+}
+
+static int mxl86110_config(struct phy_device *phydev)
+{
+	return mxl8611x_config(phydev);
+}
+
+static int mxl86111_config(struct phy_device *phydev)
+{
+	return mxl8611x_config(phydev);
+}
+
+static struct phy_driver MXL86110_driver = {
+	.name = "MXL86110",
+	.uid = PHY_ID_MXL86110,
+	.mask = 0xffffffff,
+	.features = PHY_GBIT_FEATURES,
+	.config = mxl86110_config,
+	.startup = genphy_startup,
+	.shutdown = genphy_shutdown,
+	.readext = mxl8611x_extread,
+	.writeext = mxl8611x_extwrite,
+};
+
+static struct phy_driver MXL86111_driver = {
+	.name = "MXL86111",
+	.uid = PHY_ID_MXL86111,
+	.mask = 0xffffffff,
+	.features = PHY_GBIT_FEATURES,
+	.config = mxl86111_config,
+	.startup = genphy_startup,
+	.shutdown = genphy_shutdown,
+	.readext = mxl8611x_extread,
+	.writeext = mxl8611x_extwrite,
+};
+
+int phy_mxl8611x_init(void)
+{
+        phy_register(&MXL86110_driver);
+        phy_register(&MXL86111_driver);
+
+        return 0;
+}
diff --git a/drivers/net/phy/phy.c b/drivers/net/phy/phy.c
index c9fc20855b..1d87fb8859 100644
--- a/drivers/net/phy/phy.c
+++ b/drivers/net/phy/phy.c
@@ -526,6 +526,9 @@ int phy_init(void)
 #ifdef CONFIG_PHY_MESON_GXL
 	phy_meson_gxl_init();
 #endif
+#ifdef CONFIG_PHY_MXL8611X
+	phy_mxl8611x_init();
+#endif
 #ifdef CONFIG_PHY_NATSEMI
 	phy_natsemi_init();
 #endif
